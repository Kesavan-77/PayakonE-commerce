{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\", \"skipResolvingSlotProps\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState } from './appendOwnerState';\nimport { mergeSlotProps } from './mergeSlotProps';\nimport { resolveComponentProps } from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\n\nexport function useSlotProps(parameters) {\n  var _parameters$additiona;\n\n  const {\n    elementType,\n    externalSlotProps,\n    ownerState,\n    skipResolvingSlotProps = false\n  } = parameters,\n        rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","unstable_useForkRef","useForkRef","appendOwnerState","mergeSlotProps","resolveComponentProps","useSlotProps","parameters","_parameters$additiona","elementType","externalSlotProps","ownerState","skipResolvingSlotProps","rest","resolvedComponentsProps","props","mergedProps","internalRef","ref","additionalProps"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/base/utils/useSlotProps.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"elementType\", \"externalSlotProps\", \"ownerState\", \"skipResolvingSlotProps\"];\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport { appendOwnerState } from './appendOwnerState';\nimport { mergeSlotProps } from './mergeSlotProps';\nimport { resolveComponentProps } from './resolveComponentProps';\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport function useSlotProps(parameters) {\n  var _parameters$additiona;\n  const {\n      elementType,\n      externalSlotProps,\n      ownerState,\n      skipResolvingSlotProps = false\n    } = parameters,\n    rest = _objectWithoutPropertiesLoose(parameters, _excluded);\n  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);\n  const {\n    props: mergedProps,\n    internalRef\n  } = mergeSlotProps(_extends({}, rest, {\n    externalSlotProps: resolvedComponentsProps\n  }));\n  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);\n  const props = appendOwnerState(elementType, _extends({}, mergedProps, {\n    ref\n  }), ownerState);\n  return props;\n}"],"mappings":"AAAA;;AAEA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,mBAAhB,EAAqC,YAArC,EAAmD,wBAAnD,CAAlB;AACA,SAASC,mBAAmB,IAAIC,UAAhC,QAAkD,YAAlD;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;EACvC,IAAIC,qBAAJ;;EACA,MAAM;IACFC,WADE;IAEFC,iBAFE;IAGFC,UAHE;IAIFC,sBAAsB,GAAG;EAJvB,IAKAL,UALN;EAAA,MAMEM,IAAI,GAAGd,6BAA6B,CAACQ,UAAD,EAAaP,SAAb,CANtC;;EAOA,MAAMc,uBAAuB,GAAGF,sBAAsB,GAAG,EAAH,GAAQP,qBAAqB,CAACK,iBAAD,EAAoBC,UAApB,CAAnF;EACA,MAAM;IACJI,KAAK,EAAEC,WADH;IAEJC;EAFI,IAGFb,cAAc,CAACN,QAAQ,CAAC,EAAD,EAAKe,IAAL,EAAW;IACpCH,iBAAiB,EAAEI;EADiB,CAAX,CAAT,CAHlB;EAMA,MAAMI,GAAG,GAAGhB,UAAU,CAACe,WAAD,EAAcH,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACI,GAAjF,EAAsF,CAACV,qBAAqB,GAAGD,UAAU,CAACY,eAApC,KAAwD,IAAxD,GAA+D,KAAK,CAApE,GAAwEX,qBAAqB,CAACU,GAApL,CAAtB;EACA,MAAMH,KAAK,GAAGZ,gBAAgB,CAACM,WAAD,EAAcX,QAAQ,CAAC,EAAD,EAAKkB,WAAL,EAAkB;IACpEE;EADoE,CAAlB,CAAtB,EAE1BP,UAF0B,CAA9B;EAGA,OAAOI,KAAP;AACD"},"metadata":{},"sourceType":"module"}