{"ast":null,"code":"'use client';\n\nimport _slicedToArray from \"/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nvar globalId = 0;\n\nfunction useGlobalId(idOverride) {\n  var _React$useState = React.useState(idOverride),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      defaultId = _React$useState2[0],\n      setDefaultId = _React$useState2[1];\n\n  var id = idOverride || defaultId;\n  React.useEffect(function () {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(\"mui-\".concat(globalId));\n    }\n  }, [defaultId]);\n  return id;\n} // downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nvar maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\n\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    var reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  } // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n\n\n  return useGlobalId(idOverride);\n}","map":{"version":3,"names":["React","globalId","useGlobalId","idOverride","useState","defaultId","setDefaultId","id","useEffect","maybeReactUseId","toString","useId","undefined","reactId"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/utils/esm/useId/useId.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nlet globalId = 0;\nfunction useGlobalId(idOverride) {\n  const [defaultId, setDefaultId] = React.useState(idOverride);\n  const id = idOverride || defaultId;\n  React.useEffect(() => {\n    if (defaultId == null) {\n      // Fallback to this default id when possible.\n      // Use the incrementing value for client-side rendering only.\n      // We can't use it server-side.\n      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem\n      globalId += 1;\n      setDefaultId(`mui-${globalId}`);\n    }\n  }, [defaultId]);\n  return id;\n}\n\n// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814\nconst maybeReactUseId = React['useId'.toString()];\n/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride) {\n  if (maybeReactUseId !== undefined) {\n    const reactId = maybeReactUseId();\n    return idOverride != null ? idOverride : reactId;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.\n  return useGlobalId(idOverride);\n}"],"mappings":"AAAA;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,IAAIC,QAAQ,GAAG,CAAf;;AACA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAC/B,sBAAkCH,KAAK,CAACI,QAAN,CAAeD,UAAf,CAAlC;EAAA;EAAA,IAAOE,SAAP;EAAA,IAAkBC,YAAlB;;EACA,IAAMC,EAAE,GAAGJ,UAAU,IAAIE,SAAzB;EACAL,KAAK,CAACQ,SAAN,CAAgB,YAAM;IACpB,IAAIH,SAAS,IAAI,IAAjB,EAAuB;MACrB;MACA;MACA;MACA;MACAJ,QAAQ,IAAI,CAAZ;MACAK,YAAY,eAAQL,QAAR,EAAZ;IACD;EACF,CATD,EASG,CAACI,SAAD,CATH;EAUA,OAAOE,EAAP;AACD,C,CAED;;;AACA,IAAME,eAAe,GAAGT,KAAK,CAAC,QAAQU,QAAR,EAAD,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,KAAT,CAAeR,UAAf,EAA2B;EACxC,IAAIM,eAAe,KAAKG,SAAxB,EAAmC;IACjC,IAAMC,OAAO,GAAGJ,eAAe,EAA/B;IACA,OAAON,UAAU,IAAI,IAAd,GAAqBA,UAArB,GAAkCU,OAAzC;EACD,CAJuC,CAKxC;;;EACA,OAAOX,WAAW,CAACC,UAAD,CAAlB;AACD"},"metadata":{},"sourceType":"module"}