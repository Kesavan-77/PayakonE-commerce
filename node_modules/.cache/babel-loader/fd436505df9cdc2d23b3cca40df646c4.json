{"ast":null,"code":"'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useTimeout as useTimeout } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\n\nexport function useSnackbar() {\n  let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = useTimeout();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n\n\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null || onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose == null || onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n\n    timerAutoHide.start(autoHideDurationParam, () => {\n      handleClose(null, 'timeout');\n    });\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return timerAutoHide.clear;\n  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);\n\n  const handleClickAway = event => {\n    onClose == null || onClose(event, 'clickaway');\n  }; // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n\n\n  const handlePause = timerAutoHide.clear; // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null || onBlurCallback(event);\n    handleResume();\n  };\n\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null || onFocusCallback(event);\n    handlePause();\n  };\n\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null || onMouseEnterCallback(event);\n    handlePause();\n  };\n\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null || onMouseLeaveCallback(event);\n    handleResume();\n  };\n\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n\n    return undefined;\n  }, [disableWindowBlurListener, open, handleResume, handlePause]);\n\n  const getRootProps = function () {\n    let externalProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalProps, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}","map":{"version":3,"names":["_extends","React","unstable_useEventCallback","useEventCallback","unstable_useTimeout","useTimeout","extractEventHandlers","useSnackbar","parameters","autoHideDuration","disableWindowBlurListener","onClose","open","resumeHideDuration","timerAutoHide","useEffect","undefined","handleKeyDown","nativeEvent","defaultPrevented","key","document","addEventListener","removeEventListener","handleClose","event","reason","setAutoHideTimer","autoHideDurationParam","start","clear","handleClickAway","handlePause","handleResume","useCallback","createHandleBlur","otherHandlers","onBlurCallback","onBlur","createHandleFocus","onFocusCallback","onFocus","createMouseEnter","onMouseEnterCallback","onMouseEnter","createMouseLeave","onMouseLeaveCallback","onMouseLeave","window","getRootProps","externalProps","externalEventHandlers","role","onClickAway"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/base/useSnackbar/useSnackbar.js"],"sourcesContent":["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useTimeout as useTimeout } from '@mui/utils';\nimport { extractEventHandlers } from '../utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nexport function useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = useTimeout();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        // IE11, Edge (prior to using Blink?) use 'Esc'\n        if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose == null || onClose(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose == null || onClose(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    timerAutoHide.start(autoHideDurationParam, () => {\n      handleClose(null, 'timeout');\n    });\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return timerAutoHide.clear;\n  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);\n  const handleClickAway = event => {\n    onClose == null || onClose(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = timerAutoHide.clear;\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback == null || onBlurCallback(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback == null || onFocusCallback(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback == null || onMouseEnterCallback(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback == null || onMouseLeaveCallback(event);\n    handleResume();\n  };\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, open, handleResume, handlePause]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n    return _extends({\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation'\n    }, externalProps, externalEventHandlers, {\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    });\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}