{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\"],\n      _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n    colorSchemes = {}\n  } = theme,\n        otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n\n  const {\n    light\n  } = colorSchemes,\n        otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\n\n  Object.entries(otherColorSchemes || {}).forEach(_ref => {\n    let [key, scheme] = _ref;\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: _extends({}, rootCss),\n        vars: rootVars\n      };\n    }\n\n    return {\n      css: _extends({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","otherTheme","vars","rootVars","css","rootCss","varsWithDefaults","rootVarsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","Object","entries","forEach","key","scheme","generateCssVars","colorScheme"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\"],\n  _excluded2 = [\"light\"];\nimport { deepmerge } from '@mui/utils';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {}\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, _excluded2);\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // light color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap.light = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    if (!colorScheme) {\n      return {\n        css: _extends({}, rootCss),\n        vars: rootVars\n      };\n    }\n    return {\n      css: _extends({}, colorSchemesMap[colorScheme].css),\n      vars: colorSchemesMap[colorScheme].vars\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,MAAMC,SAAS,GAAG,CAAC,cAAD,EAAiB,YAAjB,CAAlB;AAAA,MACEC,UAAU,GAAG,CAAC,OAAD,CADf;AAEA,SAASC,SAAT,QAA0B,YAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,YAA/B,EAA6C;EAC3C;EACA,MAAM;IACFC,YAAY,GAAG;EADb,IAEAF,KAFN;EAAA,MAGEG,UAAU,GAAGT,6BAA6B,CAACM,KAAD,EAAQL,SAAR,CAH5C;;EAIA,MAAM;IACJS,IAAI,EAAEC,QADF;IAEJC,GAAG,EAAEC,OAFD;IAGJC,gBAAgB,EAAEC;EAHd,IAIFX,aAAa,CAACK,UAAD,EAAaF,YAAb,CAJjB;EAKA,IAAIS,SAAS,GAAGD,oBAAhB;EACA,MAAME,eAAe,GAAG,EAAxB;;EACA,MAAM;IACFC;EADE,IAEAV,YAFN;EAAA,MAGEW,iBAAiB,GAAGnB,6BAA6B,CAACQ,YAAD,EAAeN,UAAf,CAHnD;;EAIAkB,MAAM,CAACC,OAAP,CAAeF,iBAAiB,IAAI,EAApC,EAAwCG,OAAxC,CAAgD,QAAmB;IAAA,IAAlB,CAACC,GAAD,EAAMC,MAAN,CAAkB;IACjE,MAAM;MACJd,IADI;MAEJE,GAFI;MAGJE;IAHI,IAIFV,aAAa,CAACoB,MAAD,EAASjB,YAAT,CAJjB;IAKAS,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYF,gBAAZ,CAArB;IACAG,eAAe,CAACM,GAAD,CAAf,GAAuB;MACrBX,GADqB;MAErBF;IAFqB,CAAvB;EAID,CAXD;;EAYA,IAAIQ,KAAJ,EAAW;IACT;IACA,MAAM;MACJN,GADI;MAEJF,IAFI;MAGJI;IAHI,IAIFV,aAAa,CAACc,KAAD,EAAQX,YAAR,CAJjB;IAKAS,SAAS,GAAGb,SAAS,CAACa,SAAD,EAAYF,gBAAZ,CAArB;IACAG,eAAe,CAACC,KAAhB,GAAwB;MACtBN,GADsB;MAEtBF;IAFsB,CAAxB;EAID;;EACD,MAAMe,eAAe,GAAGC,WAAW,IAAI;IACrC,IAAI,CAACA,WAAL,EAAkB;MAChB,OAAO;QACLd,GAAG,EAAEb,QAAQ,CAAC,EAAD,EAAKc,OAAL,CADR;QAELH,IAAI,EAAEC;MAFD,CAAP;IAID;;IACD,OAAO;MACLC,GAAG,EAAEb,QAAQ,CAAC,EAAD,EAAKkB,eAAe,CAACS,WAAD,CAAf,CAA6Bd,GAAlC,CADR;MAELF,IAAI,EAAEO,eAAe,CAACS,WAAD,CAAf,CAA6BhB;IAF9B,CAAP;EAID,CAXD;;EAYA,OAAO;IACLA,IAAI,EAAEM,SADD;IAELS;EAFK,CAAP;AAID;;AACD,eAAepB,cAAf"},"metadata":{},"sourceType":"module"}