{"ast":null,"code":"import PropTypes from 'prop-types';\nimport chainPropTypes from '../chainPropTypes';\n\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  var _elementType$prototyp = elementType.prototype,\n      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;\n  return Boolean(prototype.isReactComponent);\n}\n\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  var element = props[propName];\n  var safePropName = propFullName || propName;\n\n  if (element == null || // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for Emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n\n  var warningHint;\n  var elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n\n  if (warningHint !== undefined) {\n    return new Error(\"Invalid \".concat(location, \" `\").concat(safePropName, \"` supplied to `\").concat(componentName, \"`. \") + \"Expected an element that can hold a ref. \".concat(warningHint, \" \") + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n\n  return null;\n}\n\nvar elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;","map":{"version":3,"names":["PropTypes","chainPropTypes","isClassComponent","elementType","prototype","Boolean","isReactComponent","acceptingRef","props","propName","componentName","location","propFullName","element","safePropName","window","warningHint","type","undefined","Error","elementAcceptingRef","isRequired"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/utils/esm/elementAcceptingRef/elementAcceptingRef.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport chainPropTypes from '../chainPropTypes';\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\nfunction acceptingRef(props, propName, componentName, location, propFullName) {\n  const element = props[propName];\n  const safePropName = propFullName || propName;\n  if (element == null ||\n  // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for Emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n  let warningHint;\n  const elementType = element.type;\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n  if (typeof elementType === 'function' && !isClassComponent(elementType)) {\n    warningHint = 'Did you accidentally use a plain function component for an element instead?';\n  }\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n  return null;\n}\nconst elementAcceptingRef = chainPropTypes(PropTypes.element, acceptingRef);\nelementAcceptingRef.isRequired = chainPropTypes(PropTypes.element.isRequired, acceptingRef);\nexport default elementAcceptingRef;"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AACA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;EACrC;EACA,4BAEIA,WAFJ,CACEC,SADF;EAAA,IACEA,SADF,sCACc,EADd;EAGA,OAAOC,OAAO,CAACD,SAAS,CAACE,gBAAX,CAAd;AACD;;AACD,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuCC,aAAvC,EAAsDC,QAAtD,EAAgEC,YAAhE,EAA8E;EAC5E,IAAMC,OAAO,GAAGL,KAAK,CAACC,QAAD,CAArB;EACA,IAAMK,YAAY,GAAGF,YAAY,IAAIH,QAArC;;EACA,IAAII,OAAO,IAAI,IAAX,IACJ;EACA;EACA;EACA;EACA,OAAOE,MAAP,KAAkB,WALlB,EAK+B;IAC7B,OAAO,IAAP;EACD;;EACD,IAAIC,WAAJ;EACA,IAAMb,WAAW,GAAGU,OAAO,CAACI,IAA5B;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EACE,IAAI,OAAOd,WAAP,KAAuB,UAAvB,IAAqC,CAACD,gBAAgB,CAACC,WAAD,CAA1D,EAAyE;IACvEa,WAAW,GAAG,6EAAd;EACD;;EACD,IAAIA,WAAW,KAAKE,SAApB,EAA+B;IAC7B,OAAO,IAAIC,KAAJ,CAAU,kBAAWR,QAAX,eAAyBG,YAAzB,4BAAyDJ,aAAzD,8DAA2HM,WAA3H,SAA4I,mEAAtJ,CAAP;EACD;;EACD,OAAO,IAAP;AACD;;AACD,IAAMI,mBAAmB,GAAGnB,cAAc,CAACD,SAAS,CAACa,OAAX,EAAoBN,YAApB,CAA1C;AACAa,mBAAmB,CAACC,UAApB,GAAiCpB,cAAc,CAACD,SAAS,CAACa,OAAV,CAAkBQ,UAAnB,EAA+Bd,YAA/B,CAA/C;AACA,eAAea,mBAAf"},"metadata":{},"sourceType":"module"}