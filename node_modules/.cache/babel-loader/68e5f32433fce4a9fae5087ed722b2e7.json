{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { ListContext } from '../useList';\n/**\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\n *\n * @param value The value of the Option.\n * @returns The stable ListContext value.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\n */\n\nexport function useOptionContextStabilizer(value) {\n  const listContext = React.useContext(ListContext);\n\n  if (!listContext) {\n    throw new Error('Option: ListContext was not found.');\n  }\n\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(value); // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n\n  const localGetItemState = React.useCallback(itemValue => {\n    if (itemValue !== value) {\n      throw new Error(['Base UI Option: Tried to access the state of another Option.', 'This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));\n    }\n\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, value]); // Create a local (per Option) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes Options re-render only when their state actually change, not when any Option's state changes.\n\n  const localContextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}","map":{"version":3,"names":["React","ListContext","useOptionContextStabilizer","value","listContext","useContext","Error","getItemState","dispatch","highlighted","selected","focusable","localGetItemState","useCallback","itemValue","join","localContextValue","useMemo","contextValue"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/base/useOption/useOptionContextStabilizer.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { ListContext } from '../useList';\n\n/**\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\n *\n * @param value The value of the Option.\n * @returns The stable ListContext value.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\n */\nexport function useOptionContextStabilizer(value) {\n  const listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('Option: ListContext was not found.');\n  }\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = getItemState(value);\n\n  // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n  const localGetItemState = React.useCallback(itemValue => {\n    if (itemValue !== value) {\n      throw new Error(['Base UI Option: Tried to access the state of another Option.', 'This is unsupported when the Option uses the OptionContextStabilizer as a performance optimization.'].join('/n'));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, value]);\n\n  // Create a local (per Option) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes Options re-render only when their state actually change, not when any Option's state changes.\n  const localContextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue\n  };\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,KAApC,EAA2C;EAChD,MAAMC,WAAW,GAAGJ,KAAK,CAACK,UAAN,CAAiBJ,WAAjB,CAApB;;EACA,IAAI,CAACG,WAAL,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;EACD;;EACD,MAAM;IACJC,YADI;IAEJC;EAFI,IAGFJ,WAHJ;EAIA,MAAM;IACJK,WADI;IAEJC,QAFI;IAGJC;EAHI,IAIFJ,YAAY,CAACJ,KAAD,CAJhB,CATgD,CAehD;EACA;;EACA,MAAMS,iBAAiB,GAAGZ,KAAK,CAACa,WAAN,CAAkBC,SAAS,IAAI;IACvD,IAAIA,SAAS,KAAKX,KAAlB,EAAyB;MACvB,MAAM,IAAIG,KAAJ,CAAU,CAAC,8DAAD,EAAiE,qGAAjE,EAAwKS,IAAxK,CAA6K,IAA7K,CAAV,CAAN;IACD;;IACD,OAAO;MACLN,WADK;MAELC,QAFK;MAGLC;IAHK,CAAP;EAKD,CATyB,EASvB,CAACF,WAAD,EAAcC,QAAd,EAAwBC,SAAxB,EAAmCR,KAAnC,CATuB,CAA1B,CAjBgD,CA4BhD;EACA;EACA;;EACA,MAAMa,iBAAiB,GAAGhB,KAAK,CAACiB,OAAN,CAAc,OAAO;IAC7CT,QAD6C;IAE7CD,YAAY,EAAEK;EAF+B,CAAP,CAAd,EAGtB,CAACJ,QAAD,EAAWI,iBAAX,CAHsB,CAA1B;EAIA,OAAO;IACLM,YAAY,EAAEF;EADT,CAAP;AAGD"},"metadata":{},"sourceType":"module"}