{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\n\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null); // @ts-expect-error TODO upstream fix\n\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes\n/* remove-proptypes */\n= {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.func]),\n\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport { Portal };","map":{"version":3,"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useForkRef","useForkRef","unstable_setRef","setRef","jsx","_jsx","getContainer","container","Portal","forwardRef","props","forwardedRef","children","disablePortal","mountNode","setMountNode","useState","handleRef","isValidElement","ref","document","body","undefined","newProps","cloneElement","Fragment","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","func","bool"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/base/Portal/Portal.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useForkRef as useForkRef, unstable_setRef as setRef } from '@mui/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction getContainer(container) {\n  return typeof container === 'function' ? container() : container;\n}\n\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, forwardedRef) {\n  const {\n    children,\n    container,\n    disablePortal = false\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  // @ts-expect-error TODO upstream fix\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, forwardedRef);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(forwardedRef, mountNode);\n      return () => {\n        setRef(forwardedRef, null);\n      };\n    }\n    return undefined;\n  }, [forwardedRef, mountNode, disablePortal]);\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      const newProps = {\n        ref: handleRef\n      };\n      return /*#__PURE__*/React.cloneElement(children, newProps);\n    }\n    return /*#__PURE__*/_jsx(React.Fragment, {\n      children: children\n    });\n  }\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([HTMLElementType, PropTypes.func]),\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal: PropTypes.bool\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\nexport { Portal };"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,0BAA0B,IAAIC,iBAAnE,EAAsFC,mBAAmB,IAAIC,UAA7G,EAAyHC,eAAe,IAAIC,MAA5I,QAA0J,YAA1J;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;EAC/B,OAAO,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAAvD;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG,aAAaf,KAAK,CAACgB,UAAN,CAAiB,SAASD,MAAT,CAAgBE,KAAhB,EAAuBC,YAAvB,EAAqC;EAChF,MAAM;IACJC,QADI;IAEJL,SAFI;IAGJM,aAAa,GAAG;EAHZ,IAIFH,KAJJ;EAKA,MAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4BtB,KAAK,CAACuB,QAAN,CAAe,IAAf,CAAlC,CANgF,CAOhF;;EACA,MAAMC,SAAS,GAAGhB,UAAU,EAAE,aAAaR,KAAK,CAACyB,cAAN,CAAqBN,QAArB,IAAiCA,QAAQ,CAACO,GAA1C,GAAgD,IAA/D,EAAqER,YAArE,CAA5B;EACAZ,iBAAiB,CAAC,MAAM;IACtB,IAAI,CAACc,aAAL,EAAoB;MAClBE,YAAY,CAACT,YAAY,CAACC,SAAD,CAAZ,IAA2Ba,QAAQ,CAACC,IAArC,CAAZ;IACD;EACF,CAJgB,EAId,CAACd,SAAD,EAAYM,aAAZ,CAJc,CAAjB;EAKAd,iBAAiB,CAAC,MAAM;IACtB,IAAIe,SAAS,IAAI,CAACD,aAAlB,EAAiC;MAC/BV,MAAM,CAACQ,YAAD,EAAeG,SAAf,CAAN;MACA,OAAO,MAAM;QACXX,MAAM,CAACQ,YAAD,EAAe,IAAf,CAAN;MACD,CAFD;IAGD;;IACD,OAAOW,SAAP;EACD,CARgB,EAQd,CAACX,YAAD,EAAeG,SAAf,EAA0BD,aAA1B,CARc,CAAjB;;EASA,IAAIA,aAAJ,EAAmB;IACjB,KAAK,aAAapB,KAAK,CAACyB,cAAN,CAAqBN,QAArB,CAAlB,EAAkD;MAChD,MAAMW,QAAQ,GAAG;QACfJ,GAAG,EAAEF;MADU,CAAjB;MAGA,OAAO,aAAaxB,KAAK,CAAC+B,YAAN,CAAmBZ,QAAnB,EAA6BW,QAA7B,CAApB;IACD;;IACD,OAAO,aAAalB,IAAI,CAACZ,KAAK,CAACgC,QAAP,EAAiB;MACvCb,QAAQ,EAAEA;IAD6B,CAAjB,CAAxB;EAGD;;EACD,OAAO,aAAaP,IAAI,CAACZ,KAAK,CAACgC,QAAP,EAAiB;IACvCb,QAAQ,EAAEE,SAAS,GAAG,aAAapB,QAAQ,CAACgC,YAAT,CAAsBd,QAAtB,EAAgCE,SAAhC,CAAhB,GAA6DA;EADzC,CAAjB,CAAxB;AAGD,CArC2B,CAA5B;AAsCAa,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,MAAM,CAACsB;AAAU;AAAjB,EAA0C;EAChF;EACA;EACA;EACA;;EACA;AACF;AACA;EACElB,QAAQ,EAAEjB,SAAS,CAACoC,IAR4D;;EAShF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACExB,SAAS,EAAEZ;EAAU;EAAD,CAAuCqC,SAAhD,CAA0D,CAACnC,eAAD,EAAkBF,SAAS,CAACsC,IAA5B,CAA1D,CAnBqE;;EAoBhF;AACF;AACA;AACA;EACEpB,aAAa,EAAElB,SAAS,CAACuC;AAxBuD,CAAlF,GAyBI,KAAK,CAzBT;;AA0BA,IAAIP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzC;EACArB,MAAM,CAAC,cAAc,EAAf,CAAN,GAA2BZ,SAAS,CAACY,MAAM,CAACsB,SAAR,CAApC;AACD;;AACD,SAAStB,MAAT"},"metadata":{},"sourceType":"module"}