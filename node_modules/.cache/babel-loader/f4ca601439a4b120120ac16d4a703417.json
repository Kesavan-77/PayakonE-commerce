{"ast":null,"code":"import _defineProperty from \"/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nexport function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\nexport function toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\nexport function convertLength(baseFontSize) {\n  return function (length, toUnit) {\n    var fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    var pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    var outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty(_ref) {\n  var size = _ref.size,\n      grid = _ref.grid;\n  var sizeBelow = size - size % grid;\n  var sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\nexport function fontGrid(_ref2) {\n  var lineHeight = _ref2.lineHeight,\n      pixels = _ref2.pixels,\n      htmlFontSize = _ref2.htmlFontSize;\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\nexport function responsiveProperty(_ref3) {\n  var cssProperty = _ref3.cssProperty,\n      min = _ref3.min,\n      max = _ref3.max,\n      _ref3$unit = _ref3.unit,\n      unit = _ref3$unit === void 0 ? 'rem' : _ref3$unit,\n      _ref3$breakpoints = _ref3.breakpoints,\n      breakpoints = _ref3$breakpoints === void 0 ? [600, 900, 1200] : _ref3$breakpoints,\n      _ref3$transform = _ref3.transform,\n      transform = _ref3$transform === void 0 ? null : _ref3$transform;\n\n  var output = _defineProperty({}, cssProperty, \"\".concat(min).concat(unit));\n\n  var factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(function (breakpoint) {\n    var value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[\"@media (min-width:\".concat(breakpoint, \"px)\")] = _defineProperty({}, cssProperty, \"\".concat(Math.round(value * 10000) / 10000).concat(unit));\n  });\n  return output;\n}","map":{"version":3,"names":["isUnitless","value","String","parseFloat","length","getUnit","input","match","toUnitless","convertLength","baseFontSize","toUnit","fromUnit","pxLength","outputLength","toFixed","alignProperty","size","grid","sizeBelow","sizeAbove","fontGrid","lineHeight","pixels","htmlFontSize","responsiveProperty","cssProperty","min","max","unit","breakpoints","transform","output","factor","forEach","breakpoint","Math","round"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/material/styles/cssUtils.js"],"sourcesContent":["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}