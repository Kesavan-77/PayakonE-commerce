{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { ListContext } from '../useList';\n/**\n * Stabilizes the ListContext value for the MenuItem component, so it doesn't change when sibling items update.\n *\n * @param id The id of the MenuItem. If undefined, it will be generated with useId.\n * @returns The stable ListContext value and the id of the MenuItem.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItemContextStabilizer API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item-context-stabilizer)\n */\n\nexport function useMenuItemContextStabilizer(id) {\n  var listContext = React.useContext(ListContext);\n\n  if (!listContext) {\n    throw new Error('MenuItem: ListContext was not found.');\n  }\n\n  var itemId = useId(id);\n  var getItemState = listContext.getItemState,\n      dispatch = listContext.dispatch;\n  var itemState;\n\n  if (itemId != null) {\n    itemState = getItemState(itemId);\n  } else {\n    itemState = {\n      focusable: true,\n      highlighted: false,\n      selected: false\n    };\n  }\n\n  var _itemState = itemState,\n      highlighted = _itemState.highlighted,\n      selected = _itemState.selected,\n      focusable = _itemState.focusable; // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n\n  var localGetItemState = React.useCallback(function (itemValue) {\n    if (itemValue !== itemId) {\n      throw new Error(['Base UI MenuItem: Tried to access the state of another MenuItem.', \"itemValue: \".concat(itemValue, \" | id: \").concat(itemId), 'This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.'].join('/n'));\n    }\n\n    return {\n      highlighted: highlighted,\n      selected: selected,\n      focusable: focusable\n    };\n  }, [highlighted, selected, focusable, itemId]); // Create a local (per MenuItem) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes MenuItems re-render only when their state actually change, not when any MenuItem's state changes.\n\n  var localContextValue = React.useMemo(function () {\n    return {\n      dispatch: dispatch,\n      getItemState: localGetItemState\n    };\n  }, [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue,\n    id: itemId\n  };\n}","map":{"version":3,"names":["React","unstable_useId","useId","ListContext","useMenuItemContextStabilizer","id","listContext","useContext","Error","itemId","getItemState","dispatch","itemState","focusable","highlighted","selected","localGetItemState","useCallback","itemValue","join","localContextValue","useMemo","contextValue"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { unstable_useId as useId } from '@mui/utils';\nimport { ListContext } from '../useList';\n\n/**\n * Stabilizes the ListContext value for the MenuItem component, so it doesn't change when sibling items update.\n *\n * @param id The id of the MenuItem. If undefined, it will be generated with useId.\n * @returns The stable ListContext value and the id of the MenuItem.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItemContextStabilizer API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item-context-stabilizer)\n */\nexport function useMenuItemContextStabilizer(id) {\n  const listContext = React.useContext(ListContext);\n  if (!listContext) {\n    throw new Error('MenuItem: ListContext was not found.');\n  }\n  const itemId = useId(id);\n  const {\n    getItemState,\n    dispatch\n  } = listContext;\n  let itemState;\n  if (itemId != null) {\n    itemState = getItemState(itemId);\n  } else {\n    itemState = {\n      focusable: true,\n      highlighted: false,\n      selected: false\n    };\n  }\n  const {\n    highlighted,\n    selected,\n    focusable\n  } = itemState;\n\n  // The local version of getItemState can be only called with the current Option's value.\n  // It doesn't make much sense to render an Option depending on other Options' state anyway.\n  const localGetItemState = React.useCallback(itemValue => {\n    if (itemValue !== itemId) {\n      throw new Error(['Base UI MenuItem: Tried to access the state of another MenuItem.', `itemValue: ${itemValue} | id: ${itemId}`, 'This is unsupported when the MenuItem uses the MenuItemContextStabilizer as a performance optimization.'].join('/n'));\n    }\n    return {\n      highlighted,\n      selected,\n      focusable\n    };\n  }, [highlighted, selected, focusable, itemId]);\n\n  // Create a local (per MenuItem) instance of the ListContext that changes only when\n  // the getItemState's return value changes.\n  // This makes MenuItems re-render only when their state actually change, not when any MenuItem's state changes.\n  const localContextValue = React.useMemo(() => ({\n    dispatch,\n    getItemState: localGetItemState\n  }), [dispatch, localGetItemState]);\n  return {\n    contextValue: localContextValue,\n    id: itemId\n  };\n}"],"mappings":"AAAA;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,cAAc,IAAIC,KAA3B,QAAwC,YAAxC;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,4BAAT,CAAsCC,EAAtC,EAA0C;EAC/C,IAAMC,WAAW,GAAGN,KAAK,CAACO,UAAN,CAAiBJ,WAAjB,CAApB;;EACA,IAAI,CAACG,WAAL,EAAkB;IAChB,MAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;EACD;;EACD,IAAMC,MAAM,GAAGP,KAAK,CAACG,EAAD,CAApB;EACA,IACEK,YADF,GAGIJ,WAHJ,CACEI,YADF;EAAA,IAEEC,QAFF,GAGIL,WAHJ,CAEEK,QAFF;EAIA,IAAIC,SAAJ;;EACA,IAAIH,MAAM,IAAI,IAAd,EAAoB;IAClBG,SAAS,GAAGF,YAAY,CAACD,MAAD,CAAxB;EACD,CAFD,MAEO;IACLG,SAAS,GAAG;MACVC,SAAS,EAAE,IADD;MAEVC,WAAW,EAAE,KAFH;MAGVC,QAAQ,EAAE;IAHA,CAAZ;EAKD;;EACD,iBAIIH,SAJJ;EAAA,IACEE,WADF,cACEA,WADF;EAAA,IAEEC,QAFF,cAEEA,QAFF;EAAA,IAGEF,SAHF,cAGEA,SAHF,CApB+C,CA0B/C;EACA;;EACA,IAAMG,iBAAiB,GAAGhB,KAAK,CAACiB,WAAN,CAAkB,UAAAC,SAAS,EAAI;IACvD,IAAIA,SAAS,KAAKT,MAAlB,EAA0B;MACxB,MAAM,IAAID,KAAJ,CAAU,CAAC,kEAAD,uBAAmFU,SAAnF,oBAAsGT,MAAtG,GAAgH,yGAAhH,EAA2NU,IAA3N,CAAgO,IAAhO,CAAV,CAAN;IACD;;IACD,OAAO;MACLL,WAAW,EAAXA,WADK;MAELC,QAAQ,EAARA,QAFK;MAGLF,SAAS,EAATA;IAHK,CAAP;EAKD,CATyB,EASvB,CAACC,WAAD,EAAcC,QAAd,EAAwBF,SAAxB,EAAmCJ,MAAnC,CATuB,CAA1B,CA5B+C,CAuC/C;EACA;EACA;;EACA,IAAMW,iBAAiB,GAAGpB,KAAK,CAACqB,OAAN,CAAc;IAAA,OAAO;MAC7CV,QAAQ,EAARA,QAD6C;MAE7CD,YAAY,EAAEM;IAF+B,CAAP;EAAA,CAAd,EAGtB,CAACL,QAAD,EAAWK,iBAAX,CAHsB,CAA1B;EAIA,OAAO;IACLM,YAAY,EAAEF,iBADT;IAELf,EAAE,EAAEI;EAFC,CAAP;AAID"},"metadata":{},"sourceType":"module"}