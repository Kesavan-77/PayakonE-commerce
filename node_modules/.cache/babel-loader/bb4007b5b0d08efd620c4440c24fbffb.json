{"ast":null,"code":"import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n\n  return coords;\n}\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\n\n\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = { ...middlewareData,\n      [name]: { ...middlewareData[name],\n        ...data\n      }\n    };\n\n    if (reset && resetCount <= 50) {\n      resetCount++;\n\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n\n      i = -1;\n    }\n  }\n\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\n\n\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? { ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\n\n\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state; // Since `element` is required, we don't Partial<> the type.\n\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n\n    if (element == null) {\n      return {};\n    }\n\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0; // DOM platform can return `window` as the `offsetParent`.\n\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n\n    const centerToReference = endDiff / 2 - startDiff / 2; // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding); // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max); // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\n\n\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'autoPlacement',\n    options,\n\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n\n      if (currentPlacement == null) {\n        return {};\n      }\n\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))); // Make `computeCoords` start from the right place.\n\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1]; // There are more placements to check.\n\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ? // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) : // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0, // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\n\n\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'flip',\n    options,\n\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state); // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }]; // One or more sides is overflowing.\n\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        } // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n\n\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement; // Otherwise fallback.\n\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n\n                if (placement) {\n                  resetPlacement = placement;\n                }\n\n                break;\n              }\n\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n\n      return {};\n    }\n\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\n\n\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'hide',\n    options,\n\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, { ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n\n        default:\n          {\n            return {};\n          }\n      }\n    }\n\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\n\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n\n    prevRect = rect;\n  }\n\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\n\n\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'inline',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state; // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        } // There are 2 or more connected rects.\n\n\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n\n        return fallback;\n      }\n\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n}; // For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\n\n\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n\n  return {\n    name: 'offset',\n    options,\n\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options); // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: { ...diffCoords,\n          placement\n        }\n      };\n    }\n\n  };\n};\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\n\n\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'shift',\n    options,\n\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n\n      const limitedCoords = limiter.fn({ ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return { ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\n\n\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    options,\n\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n\n  };\n};\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\n\n\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return {\n    name: 'size',\n    options,\n\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n\n      await apply({ ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n\n      return {};\n    }\n\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };","map":{"version":3,"names":["getSideAxis","getAlignmentAxis","getAxisLength","getSide","getAlignment","evaluate","getPaddingObject","rectToClientRect","min","clamp","placements","getAlignmentSides","getOppositeAlignmentPlacement","getOppositePlacement","getExpandedPlacements","getOppositeAxisPlacements","sides","max","getOppositeAxis","computeCoordsFromPlacement","_ref","placement","rtl","reference","floating","sideAxis","alignmentAxis","alignLength","side","isVertical","commonX","x","width","commonY","y","height","commonAlign","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","padding","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","centerOffset","getPlacementList","alignment","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements$1","undefined","overflow","currentIndex","index","currentPlacement","alignmentSides","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","reduce","acc","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","flip","_middlewareData$arrow","_middlewareData$flip","mainAxis","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","getBoundingRect","minX","minY","maxX","maxY","getRectsByLine","sortedRects","groups","prevRect","inline","nativeClientRects","Array","from","getClientRects","clientRects","fallback","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","includes","crossAxisMulti","rawValue","_middlewareData$offse","diffCoords","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","size","apply","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","noShift","availableHeight","availableWidth","maximumClippingWidth","maximumClippingHeight","xMin","xMax","yMin","yMax","nextDimensions"],"sources":["/home/kesavan-vel/Documents/Yo/React/E-Commerce/payakanMart/node_modules/@floating-ui/core/dist/floating-ui.core.mjs"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}